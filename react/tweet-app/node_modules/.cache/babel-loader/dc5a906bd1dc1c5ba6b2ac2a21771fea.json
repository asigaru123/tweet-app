{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { useHistory } from \"react-router\";\nimport { useCurrentLoginUser } from \"./useCurrentLoginUser\";\nimport { useFollow } from \"./useFollow\";\nimport { useMessage } from \"./useMessage\";\nexport const useLoginUser = () => {\n  _s();\n\n  const history = useHistory();\n  const [loginState, setLoginState] = useState(false);\n  const {\n    showMessage\n  } = useMessage();\n  const {\n    loginUser,\n    setLoginUser\n  } = useCurrentLoginUser();\n  const {\n    getMyFollow\n  } = useFollow();\n\n  const decodeJwt = headerToken => {\n    const token = headerToken.substr(7);\n    const base64Url = token.split(\".\")[1];\n    const base64 = base64Url.replace(/-/g, \"+\").replace(/-/g, \"/\");\n    return JSON.parse(decodeURIComponent(escape(window.atob(base64))));\n  };\n\n  const login = (email, password) => {\n    setLoginState(true);\n    axios.post(\"http://localhost:8080/api/login\", {\n      email: email,\n      password: password\n    }).then(res => {\n      const JwtCredential = decodeJwt(res.headers.authorization);\n      setLoginUser({ ...loginUser,\n        token: res.headers.authorization,\n        sub: JwtCredential.sub,\n        email: JwtCredential.email,\n        username: JwtCredential.username,\n        role: JwtCredential.role\n      });\n      let sm = getMyFollow;\n      setLoginState(false);\n      showMessage({\n        title: \"ログインしました\",\n        status: \"success\"\n      });\n      history.push(\"/home\");\n    }).catch(() => {\n      setLoginState(false);\n      showMessage({\n        title: \"ログインに失敗しました\",\n        status: \"error\"\n      });\n    });\n  };\n\n  return {\n    login,\n    loginState\n  };\n};\n\n_s(useLoginUser, \"3mOwXZq+V2NX7JQaNy5KD7JJoZc=\", false, function () {\n  return [useHistory, useMessage, useCurrentLoginUser, useFollow];\n});","map":{"version":3,"sources":["C:/Users/yuma/Desktop/フロント/tweet-app/src/hooks/useLoginUser.tsx"],"names":["axios","useState","useHistory","useCurrentLoginUser","useFollow","useMessage","useLoginUser","history","loginState","setLoginState","showMessage","loginUser","setLoginUser","getMyFollow","decodeJwt","headerToken","token","substr","base64Url","split","base64","replace","JSON","parse","decodeURIComponent","escape","window","atob","login","email","password","post","then","res","JwtCredential","headers","authorization","sub","username","role","sm","title","status","push","catch"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,mBAAT,QAAoC,uBAApC;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,UAAT,QAA2B,cAA3B;AAEA,OAAO,MAAMC,YAAY,GAAG,MAAM;AAAA;;AAC9B,QAAMC,OAAO,GAAGL,UAAU,EAA1B;AACA,QAAM,CAACM,UAAD,EAAaC,aAAb,IAA8BR,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM;AAACS,IAAAA;AAAD,MAAgBL,UAAU,EAAhC;AACA,QAAM;AAACM,IAAAA,SAAD;AAAYC,IAAAA;AAAZ,MAA4BT,mBAAmB,EAArD;AACA,QAAM;AAACU,IAAAA;AAAD,MAAgBT,SAAS,EAA/B;;AACA,QAAMU,SAAS,GAAIC,WAAD,IAAyB;AACvC,UAAMC,KAAK,GAAGD,WAAW,CAACE,MAAZ,CAAmB,CAAnB,CAAd;AACA,UAAMC,SAAS,GAAGF,KAAK,CAACG,KAAN,CAAY,GAAZ,EAAiB,CAAjB,CAAlB;AACA,UAAMC,MAAM,GAAGF,SAAS,CAACG,OAAV,CAAkB,IAAlB,EAAwB,GAAxB,EAA6BA,OAA7B,CAAqC,IAArC,EAA2C,GAA3C,CAAf;AACA,WAAOC,IAAI,CAACC,KAAL,CAAWC,kBAAkB,CAACC,MAAM,CAACC,MAAM,CAACC,IAAP,CAAYP,MAAZ,CAAD,CAAP,CAA7B,CAAP;AACH,GALD;;AAMA,QAAMQ,KAAK,GAAG,CAACC,KAAD,EAAgBC,QAAhB,KAAqC;AAC/CrB,IAAAA,aAAa,CAAC,IAAD,CAAb;AACAT,IAAAA,KAAK,CAAC+B,IAAN,CAAW,iCAAX,EAA8C;AAACF,MAAAA,KAAK,EAAEA,KAAR;AAAeC,MAAAA,QAAQ,EAAEA;AAAzB,KAA9C,EACCE,IADD,CACOC,GAAD,IAAS;AACX,YAAMC,aAAa,GAAGpB,SAAS,CAACmB,GAAG,CAACE,OAAJ,CAAYC,aAAb,CAA/B;AACAxB,MAAAA,YAAY,CAAC,EACT,GAAGD,SADM;AAETK,QAAAA,KAAK,EAAEiB,GAAG,CAACE,OAAJ,CAAYC,aAFV;AAGTC,QAAAA,GAAG,EAAEH,aAAa,CAACG,GAHV;AAITR,QAAAA,KAAK,EAAEK,aAAa,CAACL,KAJZ;AAKTS,QAAAA,QAAQ,EAAEJ,aAAa,CAACI,QALf;AAMTC,QAAAA,IAAI,EAAEL,aAAa,CAACK;AANX,OAAD,CAAZ;AAQA,UAAIC,EAAE,GAAG3B,WAAT;AACAJ,MAAAA,aAAa,CAAC,KAAD,CAAb;AACAC,MAAAA,WAAW,CAAC;AAAC+B,QAAAA,KAAK,EAAE,UAAR;AAAoBC,QAAAA,MAAM,EAAE;AAA5B,OAAD,CAAX;AACAnC,MAAAA,OAAO,CAACoC,IAAR,CAAa,OAAb;AACH,KAfD,EAgBCC,KAhBD,CAgBO,MAAM;AACTnC,MAAAA,aAAa,CAAC,KAAD,CAAb;AACAC,MAAAA,WAAW,CAAC;AAAC+B,QAAAA,KAAK,EAAE,aAAR;AAAuBC,QAAAA,MAAM,EAAE;AAA/B,OAAD,CAAX;AACH,KAnBD;AAoBH,GAtBD;;AAwBA,SAAO;AAACd,IAAAA,KAAD;AAAQpB,IAAAA;AAAR,GAAP;AACH,CArCM;;GAAMF,Y;UACOJ,U,EAEMG,U,EACYF,mB,EACZC,S","sourcesContent":["import axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport { useCurrentLoginUser } from \"./useCurrentLoginUser\";\r\nimport { useFollow } from \"./useFollow\";\r\nimport { useMessage } from \"./useMessage\";\r\n\r\nexport const useLoginUser = () => {\r\n    const history = useHistory();\r\n    const [loginState, setLoginState] = useState(false);\r\n    const {showMessage} = useMessage();\r\n    const {loginUser, setLoginUser} = useCurrentLoginUser();\r\n    const {getMyFollow} = useFollow();\r\n    const decodeJwt = (headerToken: string) => {\r\n        const token = headerToken.substr(7);\r\n        const base64Url = token.split(\".\")[1];\r\n        const base64 = base64Url.replace(/-/g, \"+\").replace(/-/g, \"/\");\r\n        return JSON.parse(decodeURIComponent(escape(window.atob(base64))));\r\n    };\r\n    const login = (email: string, password: string) => {\r\n        setLoginState(true);\r\n        axios.post(\"http://localhost:8080/api/login\", {email: email, password: password})\r\n        .then((res) => {\r\n            const JwtCredential = decodeJwt(res.headers.authorization);\r\n            setLoginUser({\r\n                ...loginUser,\r\n                token: res.headers.authorization,\r\n                sub: JwtCredential.sub,\r\n                email: JwtCredential.email,\r\n                username: JwtCredential.username,\r\n                role: JwtCredential.role\r\n            });\r\n            let sm = getMyFollow;\r\n            setLoginState(false);\r\n            showMessage({title: \"ログインしました\", status: \"success\"});\r\n            history.push(\"/home\");\r\n        })\r\n        .catch(() => {\r\n            setLoginState(false);\r\n            showMessage({title: \"ログインに失敗しました\", status: \"error\"});\r\n        })\r\n    }\r\n\r\n    return {login, loginState};\r\n};"]},"metadata":{},"sourceType":"module"}