{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yuma\\\\Desktop\\\\\\u30D5\\u30ED\\u30F3\\u30C8\\\\tweet-app\\\\src\\\\components\\\\molecules\\\\ImageUploadModal.tsx\",\n    _s = $RefreshSig$();\n\nimport { Button } from \"@chakra-ui/button\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box } from \"@chakra-ui/layout\";\nimport { Modal, ModalBody, ModalCloseButton, ModalContent, ModalHeader, ModalOverlay } from \"@chakra-ui/modal\";\nimport { useState } from \"react\";\nimport { useChangeImage } from \"../../hooks/useChangeImage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ImageUploadModal = props => {\n  _s();\n\n  const {\n    onClose,\n    isOpen\n  } = props;\n  const [image, setImage] = useState({\n    data: []\n  });\n  const [errors, setErrors] = useState([]);\n  const {\n    changeImageState,\n    changeImage\n  } = useChangeImage();\n\n  const onChangeImage = event => {\n    console.log(event.target.value);\n    if (!event.target.files) return;\n    const img = event.target.value;\n    setImage(img);\n  };\n\n  const onClickChangeImage = () => {\n    changeImage(image);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    onClose: onClose,\n    isOpen: isOpen,\n    children: /*#__PURE__*/_jsxDEV(ModalOverlay, {\n      children: /*#__PURE__*/_jsxDEV(ModalContent, {\n        children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n          children: \"\\u753B\\u50CF\\u3092\\u5909\\u66F4\\u3059\\u308B\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ModalBody, {\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            children: [/*#__PURE__*/_jsxDEV(Input, {\n              type: \"file\",\n              accept: \"image/*,.png,.jpg,.jpeg,.gif\",\n              onChange: onChangeImage\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 36,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              onClick: onClickChangeImage,\n              children: \"\\u5909\\u66F4\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 37,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(ReactImageBase64, {\n            maxFileSize: 10485760,\n            thumbnail_size: 100,\n            drop: true,\n            dropText: \"ChangeImage\",\n            capture: \"environment\",\n            multiple: true,\n            handleChange: data => {\n              if (data.result) {\n                let list = images.data;\n                list.push(data);\n                setImages({\n                  data: list\n                });\n              } else {\n                setErrors([...errors, data.messages]);\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 25\n          }, this), errors.map((error, index) => /*#__PURE__*/_jsxDEV(Text, {\n            children: error\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 29\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ModalCloseButton, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ImageUploadModal, \"g6a2KxyyB11P8jwVUkpUSCPncPc=\", false, function () {\n  return [useChangeImage];\n});\n\n_c = ImageUploadModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"ImageUploadModal\");","map":{"version":3,"sources":["C:/Users/yuma/Desktop/フロント/tweet-app/src/components/molecules/ImageUploadModal.tsx"],"names":["Button","Input","Box","Modal","ModalBody","ModalCloseButton","ModalContent","ModalHeader","ModalOverlay","useState","useChangeImage","ImageUploadModal","props","onClose","isOpen","image","setImage","data","errors","setErrors","changeImageState","changeImage","onChangeImage","event","console","log","target","value","files","img","onClickChangeImage","result","list","images","push","setImages","messages","map","error","index"],"mappings":"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","sourcesContent":["import { Button } from \"@chakra-ui/button\";\r\nimport { Image } from \"@chakra-ui/image\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { Box } from \"@chakra-ui/layout\";\r\nimport { Modal, ModalBody, ModalCloseButton, ModalContent, ModalHeader, ModalOverlay } from \"@chakra-ui/modal\";\r\nimport { ChangeEvent, useState, VFC } from \"react\";\r\nimport { useChangeImage } from \"../../hooks/useChangeImage\";\r\n\r\ntype Props = {\r\n    onClose: () => void;\r\n    isOpen: boolean;\r\n};\r\n\r\nexport const ImageUploadModal: VFC<Props> = (props) => {\r\n    const {onClose, isOpen} = props;\r\n    const [image, setImage] = useState({data: []});\r\n    const [errors, setErrors] = useState([]);\r\n    const {changeImageState, changeImage} = useChangeImage();\r\n    const onChangeImage = (event: ChangeEvent<HTMLInputElement>) => {\r\n        console.log(event.target.value);\r\n        if(!event.target.files) return;\r\n        const img = event.target.value;\r\n        setImage(img);\r\n    };\r\n    const onClickChangeImage = () => {\r\n        changeImage(image);\r\n    };\r\n\r\n    return (\r\n        <Modal onClose={onClose} isOpen={isOpen}>\r\n            <ModalOverlay>\r\n                <ModalContent>\r\n                    <ModalHeader>画像を変更する</ModalHeader>\r\n                    <ModalBody>\r\n                        <Box>\r\n                            <Input type=\"file\" accept=\"image/*,.png,.jpg,.jpeg,.gif\" onChange={onChangeImage}/>\r\n                            <Button onClick={onClickChangeImage}>変更</Button>\r\n                        </Box>\r\n                        <ReactImageBase64\r\n                            maxFileSize={10485760}\r\n                            thumbnail_size={100}\r\n                            drop={true}\r\n                            dropText=\"ChangeImage\"\r\n                            capture=\"environment\"\r\n                            multiple={true}\r\n                            handleChange={data => {\r\n                                if(data.result){\r\n                                    let list = images.data\r\n                                    list.push(data);\r\n                                    setImages({data: list})\r\n                                }else{\r\n                                    setErrors([...errors, data.messages]);\r\n                                }\r\n                            }}\r\n                        />\r\n                        {errors.map((error, index) => \r\n                            <Text key={index}>{error}</Text>\r\n                        )}\r\n                    </ModalBody>\r\n                    <ModalCloseButton />\r\n                </ModalContent>\r\n            </ModalOverlay>\r\n        </Modal>\r\n    );\r\n};"]},"metadata":{},"sourceType":"module"}