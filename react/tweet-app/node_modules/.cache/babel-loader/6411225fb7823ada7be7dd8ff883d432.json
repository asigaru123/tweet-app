{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { useCurrentLoginUser } from \"./useCurrentLoginUser\";\nimport { useMessage } from \"./useMessage\";\nexport const useProfileImage = () => {\n  _s();\n\n  const [getProfileImageState, setGetProfileImageState] = useState(false);\n  const [changeImageState, setChangeImageState] = useState(false);\n  const {\n    showMessage\n  } = useMessage();\n  const {\n    loginUser,\n    setLoginUser\n  } = useCurrentLoginUser();\n\n  const getProfileImage = (email, token) => {\n    setGetProfileImageState(true);\n    axios.get(`http://localhost:8080/api/login/getProfileImage/${email === undefined ? loginUser.email : email}`, {\n      headers: {\n        Authorization: token === undefined ? loginUser.token : token\n      }\n    }).then(res => {\n      setLoginUser({ ...loginUser,\n        profileImage: res.data\n      });\n      setGetProfileImageState(false);\n    }).catch(() => setGetProfileImageState(false));\n  };\n\n  const changeImage = profileImage => {\n    setChangeImageState(true);\n    axios.post(`http://localhost:8080/api/login/changeProfileImage/${loginUser.email}`, { ...loginUser,\n      profileImage: profileImage\n    }, {\n      headers: {\n        Authorization: loginUser.token\n      }\n    }).then(res => {\n      showMessage({\n        title: res.data,\n        status: \"success\"\n      });\n      setChangeImageState(false);\n      getProfileImage();\n    }).catch(res => {\n      showMessage({\n        title: res.data,\n        status: \"error\"\n      });\n      setChangeImageState(false);\n    });\n  };\n\n  return {\n    getProfileImageState,\n    changeImageState,\n    getProfileImage,\n    changeImage\n  };\n};\n\n_s(useProfileImage, \"Dh9bipiI4EIfChc55QOxQMOrPIM=\", false, function () {\n  return [useMessage, useCurrentLoginUser];\n});","map":{"version":3,"sources":["C:/Users/yuma/Desktop/フロント/tweet-app/src/hooks/useProfileImage.tsx"],"names":["axios","useState","useCurrentLoginUser","useMessage","useProfileImage","getProfileImageState","setGetProfileImageState","changeImageState","setChangeImageState","showMessage","loginUser","setLoginUser","getProfileImage","email","token","get","undefined","headers","Authorization","then","res","profileImage","data","catch","changeImage","post","title","status"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,mBAAT,QAAoC,uBAApC;AACA,SAASC,UAAT,QAA2B,cAA3B;AAEA,OAAO,MAAMC,eAAe,GAAG,MAAM;AAAA;;AACjC,QAAM,CAACC,oBAAD,EAAuBC,uBAAvB,IAAkDL,QAAQ,CAAC,KAAD,CAAhE;AACA,QAAM,CAACM,gBAAD,EAAmBC,mBAAnB,IAA0CP,QAAQ,CAAC,KAAD,CAAxD;AACA,QAAM;AAACQ,IAAAA;AAAD,MAAgBN,UAAU,EAAhC;AACA,QAAM;AAACO,IAAAA,SAAD;AAAYC,IAAAA;AAAZ,MAA4BT,mBAAmB,EAArD;;AACA,QAAMU,eAAe,GAAG,CAACC,KAAD,EAAiBC,KAAjB,KAAoC;AACxDR,IAAAA,uBAAuB,CAAC,IAAD,CAAvB;AACAN,IAAAA,KAAK,CAACe,GAAN,CAAW,mDAAkDF,KAAK,KAAKG,SAAV,GAAuBN,SAAS,CAACG,KAAjC,GAA2CA,KAAO,EAA/G,EACI;AAACI,MAAAA,OAAO,EAAE;AAACC,QAAAA,aAAa,EAAEJ,KAAK,KAAKE,SAAV,GAAuBN,SAAS,CAACI,KAAjC,GAAqDA;AAArE;AAAV,KADJ,EAECK,IAFD,CAEOC,GAAD,IAAS;AACXT,MAAAA,YAAY,CAAC,EAAC,GAAGD,SAAJ;AAAeW,QAAAA,YAAY,EAAED,GAAG,CAACE;AAAjC,OAAD,CAAZ;AACAhB,MAAAA,uBAAuB,CAAC,KAAD,CAAvB;AACH,KALD,EAMCiB,KAND,CAMO,MAAMjB,uBAAuB,CAAC,KAAD,CANpC;AAQH,GAVD;;AAWA,QAAMkB,WAAW,GAAIH,YAAD,IAA2B;AAC3Cb,IAAAA,mBAAmB,CAAC,IAAD,CAAnB;AACAR,IAAAA,KAAK,CAACyB,IAAN,CAAY,sDAAqDf,SAAS,CAACG,KAAM,EAAjF,EAAoF,EAAC,GAAGH,SAAJ;AAAeW,MAAAA,YAAY,EAAEA;AAA7B,KAApF,EAAgI;AAACJ,MAAAA,OAAO,EAAE;AAACC,QAAAA,aAAa,EAAER,SAAS,CAACI;AAA1B;AAAV,KAAhI,EACCK,IADD,CACOC,GAAD,IAAS;AACXX,MAAAA,WAAW,CAAC;AAACiB,QAAAA,KAAK,EAAEN,GAAG,CAACE,IAAZ;AAA4BK,QAAAA,MAAM,EAAE;AAApC,OAAD,CAAX;AACAnB,MAAAA,mBAAmB,CAAC,KAAD,CAAnB;AACAI,MAAAA,eAAe;AAClB,KALD,EAMCW,KAND,CAMQH,GAAD,IAAS;AACZX,MAAAA,WAAW,CAAC;AAACiB,QAAAA,KAAK,EAAEN,GAAG,CAACE,IAAZ;AAA4BK,QAAAA,MAAM,EAAE;AAApC,OAAD,CAAX;AACAnB,MAAAA,mBAAmB,CAAC,KAAD,CAAnB;AACH,KATD;AAUH,GAZD;;AAcA,SAAO;AAACH,IAAAA,oBAAD;AAAuBE,IAAAA,gBAAvB;AAAyCK,IAAAA,eAAzC;AAA0DY,IAAAA;AAA1D,GAAP;AACH,CA/BM;;GAAMpB,e;UAGaD,U,EACYD,mB","sourcesContent":["import axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { useCurrentLoginUser } from \"./useCurrentLoginUser\";\r\nimport { useMessage } from \"./useMessage\";\r\n\r\nexport const useProfileImage = () => {\r\n    const [getProfileImageState, setGetProfileImageState] = useState(false);\r\n    const [changeImageState, setChangeImageState] = useState(false);\r\n    const {showMessage} = useMessage();\r\n    const {loginUser, setLoginUser} = useCurrentLoginUser();\r\n    const getProfileImage = (email?: string, token?: string) => {\r\n        setGetProfileImageState(true);\r\n        axios.get(`http://localhost:8080/api/login/getProfileImage/${email === undefined ? (loginUser.email) : (email)}`,\r\n            {headers: {Authorization: token === undefined ? (loginUser.token as string) : (token)}})\r\n        .then((res) => {\r\n            setLoginUser({...loginUser, profileImage: res.data as string});\r\n            setGetProfileImageState(false);\r\n        })\r\n        .catch(() => setGetProfileImageState(false));\r\n        \r\n    };\r\n    const changeImage = (profileImage?: string) => {\r\n        setChangeImageState(true);\r\n        axios.post(`http://localhost:8080/api/login/changeProfileImage/${loginUser.email}`, {...loginUser, profileImage: profileImage}, {headers: {Authorization: loginUser.token as string}})\r\n        .then((res) => {\r\n            showMessage({title: res.data as string, status: \"success\"});\r\n            setChangeImageState(false);\r\n            getProfileImage();\r\n        })\r\n        .catch((res) => {\r\n            showMessage({title: res.data as string, status: \"error\"});\r\n            setChangeImageState(false);\r\n        });\r\n    };\r\n\r\n    return {getProfileImageState, changeImageState, getProfileImage, changeImage};\r\n};"]},"metadata":{},"sourceType":"module"}