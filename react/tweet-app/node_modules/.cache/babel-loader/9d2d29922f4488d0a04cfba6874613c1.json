{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback } from \"react\";\nimport { useCurrentLoginUser } from \"./useCurrentLoginUser\";\nexport const useJadge = () => {\n  _s();\n\n  const {\n    loginUser\n  } = useCurrentLoginUser();\n  const isMyTweet = useCallback(allTweet => {\n    let isMyTweetFrag = false;\n\n    if (loginUser.email === (allTweet === null || allTweet === void 0 ? void 0 : allTweet.email)) {\n      isMyTweetFrag = true;\n    }\n\n    ;\n    console.log(\"*****\");\n    return isMyTweetFrag;\n  }, []);\n  const isLike = useCallback(allTweet => {\n    let isLikeFrag = false;\n\n    for (let likeName of allTweet === null || allTweet === void 0 ? void 0 : allTweet.tweetLikeList) {\n      if (loginUser.email === likeName) {\n        isLikeFrag = true;\n        break;\n      }\n\n      ;\n      console.log(\"-----\");\n      return isLikeFrag;\n    }\n\n    ;\n  }, []);\n\n  const isFollow = targetTweetEmail => {\n    var _loginUser$follow;\n\n    let isFollowFrag = false;\n\n    if (((_loginUser$follow = loginUser.follow) === null || _loginUser$follow === void 0 ? void 0 : _loginUser$follow.length) === undefined) {\n      for (let i = 0; i > loginUser.follow.length; ++i) {\n        if (loginUser.follow[i].followemail === targetTweetEmail) {\n          isFollowFrag = true;\n          break;\n        }\n\n        ;\n      }\n\n      ;\n    }\n\n    ;\n    console.log(\"-*-*-\");\n    return isFollowFrag;\n  };\n\n  return {\n    isMyTweet,\n    isLike,\n    isFollow\n  };\n};\n\n_s(useJadge, \"h6Qe9z8PegNCY1lRT1i68Jc0/ug=\", false, function () {\n  return [useCurrentLoginUser];\n});","map":{"version":3,"sources":["C:/Users/yuma/Desktop/フロント/tweet-app/src/hooks/useJadge.tsx"],"names":["useCallback","useCurrentLoginUser","useJadge","loginUser","isMyTweet","allTweet","isMyTweetFrag","email","console","log","isLike","isLikeFrag","likeName","tweetLikeList","isFollow","targetTweetEmail","isFollowFrag","follow","length","undefined","i","followemail"],"mappings":";;AAAA,SAAeA,WAAf,QAAkC,OAAlC;AAEA,SAASC,mBAAT,QAAoC,uBAApC;AAEA,OAAO,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AAC1B,QAAM;AAACC,IAAAA;AAAD,MAAcF,mBAAmB,EAAvC;AAEA,QAAMG,SAAS,GAAGJ,WAAW,CAAEK,QAAD,IAA0B;AACpD,QAAIC,aAAa,GAAG,KAApB;;AACA,QAAGH,SAAS,CAACI,KAAV,MAAoBF,QAApB,aAAoBA,QAApB,uBAAoBA,QAAQ,CAAEE,KAA9B,CAAH,EAAuC;AACnCD,MAAAA,aAAa,GAAG,IAAhB;AACH;;AAAA;AACDE,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACA,WAAOH,aAAP;AACH,GAP4B,EAO1B,EAP0B,CAA7B;AASA,QAAMI,MAAM,GAAGV,WAAW,CAAEK,QAAD,IAA0B;AACjD,QAAIM,UAAU,GAAG,KAAjB;;AACA,SAAI,IAAIC,QAAR,IAAoBP,QAApB,aAAoBA,QAApB,uBAAoBA,QAAQ,CAAEQ,aAA9B,EAA6C;AACzC,UAAGV,SAAS,CAACI,KAAV,KAAoBK,QAAvB,EAAgC;AAC5BD,QAAAA,UAAU,GAAG,IAAb;AACA;AACH;;AAAA;AACDH,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACA,aAAOE,UAAP;AACH;;AAAA;AACJ,GAVyB,EAUvB,EAVuB,CAA1B;;AAYA,QAAMG,QAAQ,GAAIC,gBAAD,IAA8B;AAAA;;AAC3C,QAAIC,YAAY,GAAG,KAAnB;;AACA,QAAG,sBAAAb,SAAS,CAACc,MAAV,wEAAkBC,MAAlB,MAA6BC,SAAhC,EAA0C;AACtC,WAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAGjB,SAAS,CAACc,MAAV,CAAkBC,MAAnC,EAA2C,EAAEE,CAA7C,EAA+C;AAC3C,YAAGjB,SAAS,CAACc,MAAV,CAAkBG,CAAlB,EAAqBC,WAArB,KAAqCN,gBAAxC,EAAyD;AACrDC,UAAAA,YAAY,GAAG,IAAf;AACA;AACH;;AAAA;AACJ;;AAAA;AACJ;;AAAA;AACDR,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACA,WAAOO,YAAP;AACH,GAZD;;AAcA,SAAO;AAACZ,IAAAA,SAAD;AAAYM,IAAAA,MAAZ;AAAoBI,IAAAA;AAApB,GAAP;AACH,CAvCM;;GAAMZ,Q;UACWD,mB","sourcesContent":["import { memo, useCallback } from \"react\";\r\nimport { TweetType } from \"../types/tweetType\";\r\nimport { useCurrentLoginUser } from \"./useCurrentLoginUser\";\r\n\r\nexport const useJadge = () => {\r\n    const {loginUser} = useCurrentLoginUser();\r\n\r\n    const isMyTweet = useCallback((allTweet?: TweetType) => {\r\n        let isMyTweetFrag = false;\r\n        if(loginUser.email === allTweet?.email){\r\n            isMyTweetFrag = true;\r\n        };\r\n        console.log(\"*****\");\r\n        return isMyTweetFrag;\r\n    }, []);\r\n\r\n    const isLike = useCallback((allTweet?: TweetType) => {\r\n        let isLikeFrag = false;\r\n        for(let likeName of allTweet?.tweetLikeList!){\r\n            if(loginUser.email === likeName){\r\n                isLikeFrag = true;\r\n                break;\r\n            };\r\n            console.log(\"-----\");\r\n            return isLikeFrag;\r\n        };\r\n    }, []);\r\n\r\n    const isFollow = (targetTweetEmail: string) => {\r\n        let isFollowFrag = false;\r\n        if(loginUser.follow?.length === undefined){\r\n            for(let i=0; i > loginUser.follow!.length; ++i){\r\n                if(loginUser.follow![i].followemail === targetTweetEmail){\r\n                    isFollowFrag = true;\r\n                    break;\r\n                };\r\n            };\r\n        };\r\n        console.log(\"-*-*-\");\r\n        return isFollowFrag;\r\n    };\r\n\r\n    return {isMyTweet, isLike, isFollow};\r\n};"]},"metadata":{},"sourceType":"module"}