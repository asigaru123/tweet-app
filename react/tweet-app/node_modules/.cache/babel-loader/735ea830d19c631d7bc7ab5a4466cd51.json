{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { useCurrentLoginUser } from \"./useCurrentLoginUser\";\nexport const useGetMyTweets = () => {\n  _s();\n\n  const ip = process.env.REACT_APP_IP_APSRV;\n  const [getMyTweetState, setGetMyTweetState] = useState(false);\n  const [myTweets, setMyTweets] = useState([]);\n  const {\n    loginUser\n  } = useCurrentLoginUser();\n\n  const getMyTweets = () => {\n    setGetMyTweetState(true);\n    axios.get(`http://${ip}:8080/api/home/mytweet/${loginUser.email}`, {\n      headers: {\n        Authorization: loginUser.token\n      }\n    }).then(res => {\n      setMyTweets(res.data);\n      setGetMyTweetState(false);\n    }).catch(() => {\n      setGetMyTweetState(false);\n    });\n  };\n\n  return {\n    getMyTweetState,\n    myTweets,\n    getMyTweets\n  };\n};\n\n_s(useGetMyTweets, \"7cQvZgA4UK7rDWvi6QoECvDYhzY=\", false, function () {\n  return [useCurrentLoginUser];\n});","map":{"version":3,"sources":["C:/Users/yuma/Desktop/dev/フロント/tweet-app/src/hooks/useGetMyTweets.tsx"],"names":["axios","useState","useCurrentLoginUser","useGetMyTweets","ip","process","env","REACT_APP_IP_APSRV","getMyTweetState","setGetMyTweetState","myTweets","setMyTweets","loginUser","getMyTweets","get","email","headers","Authorization","token","then","res","data","catch"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,OAAzB;AAEA,SAASC,mBAAT,QAAoC,uBAApC;AAEA,OAAO,MAAMC,cAAc,GAAG,MAAM;AAAA;;AAChC,QAAMC,EAAE,GAAGC,OAAO,CAACC,GAAR,CAAYC,kBAAvB;AACA,QAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCR,QAAQ,CAAC,KAAD,CAAtD;AACA,QAAM,CAACS,QAAD,EAAWC,WAAX,IAA0BV,QAAQ,CAAmB,EAAnB,CAAxC;AACA,QAAM;AAACW,IAAAA;AAAD,MAAcV,mBAAmB,EAAvC;;AACA,QAAMW,WAAW,GAAG,MAAM;AACtBJ,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACAT,IAAAA,KAAK,CAACc,GAAN,CAA6B,UAASV,EAAG,0BAAyBQ,SAAS,CAACG,KAAM,EAAlF,EAAqF;AAACC,MAAAA,OAAO,EAAE;AAACC,QAAAA,aAAa,EAAEL,SAAS,CAACM;AAA1B;AAAV,KAArF,EACCC,IADD,CACOC,GAAD,IAAS;AACXT,MAAAA,WAAW,CAACS,GAAG,CAACC,IAAL,CAAX;AACAZ,MAAAA,kBAAkB,CAAC,KAAD,CAAlB;AACH,KAJD,EAKCa,KALD,CAKO,MAAM;AACTb,MAAAA,kBAAkB,CAAC,KAAD,CAAlB;AACH,KAPD;AAQH,GAVD;;AAYA,SAAO;AAACD,IAAAA,eAAD;AAAkBE,IAAAA,QAAlB;AAA4BG,IAAAA;AAA5B,GAAP;AACH,CAlBM;;GAAMV,c;UAIWD,mB","sourcesContent":["import axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { TweetType } from \"../types/tweetType\";\r\nimport { useCurrentLoginUser } from \"./useCurrentLoginUser\";\r\n\r\nexport const useGetMyTweets = () => {\r\n    const ip = process.env.REACT_APP_IP_APSRV;\r\n    const [getMyTweetState, setGetMyTweetState] = useState(false);\r\n    const [myTweets, setMyTweets] = useState<Array<TweetType>>([]);\r\n    const {loginUser} = useCurrentLoginUser();\r\n    const getMyTweets = () => {\r\n        setGetMyTweetState(true);\r\n        axios.get<Array<TweetType>>(`http://${ip}:8080/api/home/mytweet/${loginUser.email}`, {headers: {Authorization: loginUser.token as string}})\r\n        .then((res) => {\r\n            setMyTweets(res.data);\r\n            setGetMyTweetState(false);\r\n        })\r\n        .catch(() => {\r\n            setGetMyTweetState(false);\r\n        });\r\n    };\r\n\r\n    return {getMyTweetState, myTweets, getMyTweets};\r\n};"]},"metadata":{},"sourceType":"module"}