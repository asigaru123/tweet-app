{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { useCurrentLoginUser } from \"./useCurrentLoginUser\";\nimport { useMessage } from \"./useMessage\";\nexport const useTweetLike = () => {\n  _s();\n\n  const ip = process.env.REACT_APP_IP_APSRV;\n  const {\n    showMessage\n  } = useMessage();\n  const [tweetLikeState, setTweetLikeState] = useState(false);\n  const {\n    loginUser\n  } = useCurrentLoginUser();\n\n  const insertTweetLike = tweetId => {\n    setTweetLikeState(true);\n    axios.get(`http://${ip}:8080/api/home/insertTweetLike/${loginUser.email}/${tweetId}`, {\n      headers: {\n        Authorization: loginUser.token\n      }\n    }).then(res => {\n      showMessage({\n        title: res.data,\n        status: \"success\"\n      });\n      setTweetLikeState(false);\n    }).catch(res => {\n      showMessage({\n        title: res.data,\n        status: \"error\"\n      });\n      setTweetLikeState(false);\n    });\n  };\n\n  const deleteTweetLike = tweetId => {\n    setTweetLikeState(true);\n    axios.delete(`http://${ip}:8080/api/home/deleteTweetLike/${loginUser.email}/${tweetId}`, {\n      headers: {\n        Authorization: loginUser.token\n      }\n    }).then(res => {\n      showMessage({\n        title: res.data,\n        status: \"success\"\n      });\n      setTweetLikeState(false);\n    }).catch(res => {\n      showMessage({\n        title: res.data,\n        status: \"error\"\n      });\n      setTweetLikeState(false);\n    });\n  };\n\n  return {\n    tweetLikeState,\n    insertTweetLike,\n    deleteTweetLike\n  };\n};\n\n_s(useTweetLike, \"aCoVquDW0ZiTiedPU+4JV3fa81E=\", false, function () {\n  return [useMessage, useCurrentLoginUser];\n});","map":{"version":3,"sources":["C:/Users/yuma/Desktop/dev/フロント/tweet-app/src/hooks/useTweetLike.tsx"],"names":["axios","useState","useCurrentLoginUser","useMessage","useTweetLike","ip","process","env","REACT_APP_IP_APSRV","showMessage","tweetLikeState","setTweetLikeState","loginUser","insertTweetLike","tweetId","get","email","headers","Authorization","token","then","res","title","data","status","catch","deleteTweetLike","delete"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,mBAAT,QAAoC,uBAApC;AACA,SAASC,UAAT,QAA2B,cAA3B;AAEA,OAAO,MAAMC,YAAY,GAAG,MAAM;AAAA;;AAC9B,QAAMC,EAAE,GAAGC,OAAO,CAACC,GAAR,CAAYC,kBAAvB;AACA,QAAM;AAACC,IAAAA;AAAD,MAAgBN,UAAU,EAAhC;AACA,QAAM,CAACO,cAAD,EAAiBC,iBAAjB,IAAsCV,QAAQ,CAAC,KAAD,CAApD;AACA,QAAM;AAACW,IAAAA;AAAD,MAAcV,mBAAmB,EAAvC;;AACA,QAAMW,eAAe,GAAIC,OAAD,IAAsB;AAC1CH,IAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACAX,IAAAA,KAAK,CAACe,GAAN,CAAW,UAASV,EAAG,kCAAiCO,SAAS,CAACI,KAAM,IAAGF,OAAQ,EAAnF,EAAsF;AAACG,MAAAA,OAAO,EAAE;AAACC,QAAAA,aAAa,EAAEN,SAAS,CAACO;AAA1B;AAAV,KAAtF,EACCC,IADD,CACOC,GAAD,IAAS;AACXZ,MAAAA,WAAW,CAAC;AAACa,QAAAA,KAAK,EAAED,GAAG,CAACE,IAAZ;AAA4BC,QAAAA,MAAM,EAAE;AAApC,OAAD,CAAX;AACAb,MAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACH,KAJD,EAKCc,KALD,CAKQJ,GAAD,IAAS;AACZZ,MAAAA,WAAW,CAAC;AAACa,QAAAA,KAAK,EAAED,GAAG,CAACE,IAAZ;AAA4BC,QAAAA,MAAM,EAAE;AAApC,OAAD,CAAX;AACAb,MAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACH,KARD;AASH,GAXD;;AAYA,QAAMe,eAAe,GAAIZ,OAAD,IAAsB;AAC1CH,IAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACAX,IAAAA,KAAK,CAAC2B,MAAN,CAAc,UAAStB,EAAG,kCAAiCO,SAAS,CAACI,KAAM,IAAGF,OAAQ,EAAtF,EAAyF;AAACG,MAAAA,OAAO,EAAE;AAACC,QAAAA,aAAa,EAAEN,SAAS,CAACO;AAA1B;AAAV,KAAzF,EACCC,IADD,CACOC,GAAD,IAAS;AACXZ,MAAAA,WAAW,CAAC;AAACa,QAAAA,KAAK,EAAED,GAAG,CAACE,IAAZ;AAA4BC,QAAAA,MAAM,EAAE;AAApC,OAAD,CAAX;AACAb,MAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACH,KAJD,EAKCc,KALD,CAKQJ,GAAD,IAAS;AACZZ,MAAAA,WAAW,CAAC;AAACa,QAAAA,KAAK,EAAED,GAAG,CAACE,IAAZ;AAA4BC,QAAAA,MAAM,EAAE;AAApC,OAAD,CAAX;AACAb,MAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACH,KARD;AASH,GAXD;;AAcA,SAAO;AAACD,IAAAA,cAAD;AAAiBG,IAAAA,eAAjB;AAAkCa,IAAAA;AAAlC,GAAP;AACH,CAhCM;;GAAMtB,Y;UAEaD,U,EAEFD,mB","sourcesContent":["import axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { useCurrentLoginUser } from \"./useCurrentLoginUser\";\r\nimport { useMessage } from \"./useMessage\";\r\n\r\nexport const useTweetLike = () => {\r\n    const ip = process.env.REACT_APP_IP_APSRV;\r\n    const {showMessage} = useMessage();\r\n    const [tweetLikeState, setTweetLikeState] = useState(false);\r\n    const {loginUser} = useCurrentLoginUser();\r\n    const insertTweetLike = (tweetId?: Number) => {\r\n        setTweetLikeState(true);\r\n        axios.get(`http://${ip}:8080/api/home/insertTweetLike/${loginUser.email}/${tweetId}`, {headers: {Authorization: loginUser.token as string}})\r\n        .then((res) => {\r\n            showMessage({title: res.data as string, status: \"success\"});\r\n            setTweetLikeState(false);\r\n        })\r\n        .catch((res) => {\r\n            showMessage({title: res.data as string, status: \"error\"});\r\n            setTweetLikeState(false);\r\n        });\r\n    };\r\n    const deleteTweetLike = (tweetId?: Number) => {\r\n        setTweetLikeState(true);\r\n        axios.delete(`http://${ip}:8080/api/home/deleteTweetLike/${loginUser.email}/${tweetId}`, {headers: {Authorization: loginUser.token as string}})\r\n        .then((res) => {\r\n            showMessage({title: res.data as string, status: \"success\"});\r\n            setTweetLikeState(false);\r\n        })\r\n        .catch((res) => {\r\n            showMessage({title: res.data as string, status: \"error\"});\r\n            setTweetLikeState(false);\r\n        });\r\n    };\r\n    \r\n\r\n    return {tweetLikeState, insertTweetLike, deleteTweetLike};\r\n};"]},"metadata":{},"sourceType":"module"}